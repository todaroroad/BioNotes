# 创建一个新项目所需的代码规范###################################
# 初始化设置 ####################################################
# 加载通用数据预览函数
source("/Users/hanxiangming/Library/CloudStorage/Dropbox/documents/GitHubLocal/BioNotes/基础文件/预览数据.R")
# 创建新的文件夹
dir.create(fp("/Users/hanxiangming/Library/CloudStorage/Dropbox/documents/GitHubLocal/BioNotes/"), recursive = TRUE, showWarnings = T) # 创建完成后删掉
# 创建新的文件夹
# dir.create(fp(A_proj, "改动"), recursive = TRUE, showWarnings = T) # 创建完成后删掉
# 设置当前项目工作目录
setwd(fp("/Users/hanxiangming/Library/CloudStorage/Dropbox/documents/GitHubLocal/BioNotes/"))
# 此为安装R包的文件
# package pathway
.libPaths()
5 + (2.3 - 1.125)*3.2/1.1 + 1.23E3
5 + (2.3 - 1.125)*3.2/1.1 + 1.23E3
5 + (2.3 - 1.125)*3.2/1.1 + 1.23E3
x = 1
a = 1
marks <- c("wenjian", 6, 4, 7, 8)
x <- c(33, 55, 11)
sort(x)
## [1] 11 33 55
rev(sort(x))
## [1] 55 33 11
order(x)
## [1] 3 1 2
x[order(x)]
## [1] 3 1 2
x[rev(order(x))]
is.na(c(1, NA, 3))
is.na(c(1, NA, 3)) %>% sum
c(1,3) %in% c(2,3,4)
i =
if(i>1){
print(1)
}else{
print("NO")
}
i = 2
if(i>1){
print(1)
}else{
print("NO")
}
i = 0.1
if(i>1){
print(1)
}else{
print("NO")
}
x = "2"
class(x)
x+2
as.numeric(x)+2
x <- c(1,4,6.25)
x > 3
x[x > 3]
ages <- c(30, 25, 28)
ages
names(ages) <- c("李明", "张聪", "刘颖")
ages
ages[1]+1
x <- c("男", "女", "男", "男",  "女")
sex <- factor(x)
sex
## [1] 男 女 男 男 女
## Levels: 男 女
attributes(sex)
table(sex)
rec <- list(name="李明", age=30,
scores=c(85, 76, 90))
rec
A <- matrix(11:16, nrow=3, ncol=2); print(A)
A[1,2]
A[c(1,2),2]
cbind(c(1,2), c(3,4), c(5,6))
apply(A, 2, sum)
A
print(d)
d <- data.frame(
name=c("李明", "张聪", "王建"),
age=c(30, 35, 28),
height=c(180, 162, 175),
stringsAsFactors=FALSE)
print(d)
rm(A)
load("scores.RData")
A <- matrix(11:16, nrow=3, ncol=2); print(A)
save(A, file="A.rda")
load("A.rda")
write.csv(b,"b.txt")
write.csv("b.txt",b)
write.csv(d,"d.txt")
read.csv2("d.txt")
read.csv2("d.txt",seq = ",")
read.csv2("d.txt",sep = ",")
fread("d.txt")
if(x[i] <= 0.2){
cat("Small\n")
}
x <- c(0.05, 0.6, 0.3, 0.9)
seq(along=x)
if(x[i] <= 0.2){
cat("Small\n")
}
paste0(x,"Small\n")
for(i in seq(along=x)){
paste0(x,"Small\n")
}
for(i in seq(along=x)){
paste0(x,"Small")
}
for(i in c(1,2,3,4)){
paste0(x,"Small")
}
paste0(i,"Small")
for(i in c(1,2,3,4)){
paste0(i,"Small")
}
for(i in c(1,2,3,4)){
paste0(i,"Small")
}
for(i in c(1,2,3,4)){
paste0(i,"Small")
}
print(paste0(i,"Small"))
for(i in c(1,2,3,4)){
print(paste0(i,"Small"))
}
c(1,2,3,4) %>% sum
d <- data.frame(
name=c("李明", "张聪", "王建"),
age=c(30, 35, 28),
height=c(180, 162, 175),
stringsAsFactors=FALSE)
d
d %>% mutate(height-age)
d %>% mutate(cd = height-age)
knitr::kable(dwide1)
library(tidyr)
library(dplyr)
# 示例数据
df <- tibble(
ID = c("A", "B"),
Day1 = c(10, 15),
Day2 = c(20, 25),
Day3 = c(30, 35)
)
df
df
# 宽转长
df_long <- df %>%
pivot_longer(cols = starts_with("Day"),
names_to = "Day",
values_to = "Value")
df_long
# 长转宽
df_wide <- df_long %>%
pivot_wider(names_from = Day,
values_from = Value)
df_wide
x <- rnorm(30, mean=100, sd=1)
print(round(x,2))
hist(x)
head(gapminder, 20)
library(gapminder)
head(gapminder, 20)
p <- ggplot(data = gapminder,
mapping = aes(
x = gdpPercap,
y = lifeExp))
p
p <- ggplot(gapminder, aes(gdpPercap, lifeExp))
p
p + geom_point()
p1 <- p + geom_point()
print(p1)
# 画图的美化规范####################################
## 基本的theme################
self_base_theme = theme(
text=element_text(family="Arial",face="plain",colour = "black",size = 10),
axis.title.x = element_text(margin = margin(t= 2, r = 0, b = 0, l = 0),angle = 0,vjust = 0.5, hjust = 0.5,color = "black",size = 10.1),
axis.title.y = element_text(margin = margin(t= 0, r = 2, b = 0, l = 0),angle = 90,vjust = 0.5, hjust = 0.5,color="black",size = 9.9),
axis.text.x = element_text(margin = margin(t = 2),color = "black",size = 10.1),
axis.text.y = element_text(margin = margin(r = 2),color = "black",size = 9.9),
axis.ticks.x=element_line(color="black",linewidth=0.8,linetype = "solid",lineend = "butt"),
axis.ticks.y =element_line(color="black",linewidth=0.8,linetype = "solid",lineend = "butt"),
axis.ticks.length=unit(2,"pt"),
panel.border = element_blank(),
axis.line.x=element_line(linetype=1,color="black",linewidth=0.2,lineend="butt"),
axis.line.y=element_line(linetype=1,color="black",linewidth=0.2,lineend="butt"),
panel.background = element_blank(),
plot.title = element_text(margin = margin(b = 2),color = "#2B7AB5"),
legend.box.background = element_rect(colour = "grey", linewidth = 0.1),
legend.box.margin = margin(0, 0, 0, 0),
legend.box.spacing = unit(0.2, "lines"),
legend.box = "vertical",
legend.position = "right",
legend.justification = c(1, 1),
legend.text = element_text(size = 9.8),
legend.title = element_text(color = "black",hjust=0),
legend.background = element_rect(colour = "grey", linewidth = 0.1),
legend.direction = "vertical",
legend.key = element_blank(),
legend.key.height = unit(1, "lines"),
legend.key.width = unit(1, "lines")
)
# 设置主题
theme_set(self_base_theme)
## 四个框类似bw的主题######################
self_box_theme = theme(
axis.line = element_blank(),
panel.border = element_rect(colour = "black",  fill = NA,size = 0.9),
)
## 类似classic的主题######################
self_classic_theme = theme(
panel.border = element_blank(),
axis.line.x=element_line(linetype=1,color="black",linewidth=0.4,lineend="square"),
axis.line.y=element_line(linetype=1,color="black",linewidth=0.4,lineend="square"),
)
library(easypackages)
libraries("survival","limma","tidyverse","ggalluvial","pheatmap","janitor",
"survivalROC","stringi","glmnet","ggsignif","gdata","data.table",
"dplyr","ggpubr","DT","rms","forestplot","showtext","survminer",
"ggsci","gridExtra","reticulate","here","patchwork","foreach"
)
hh = function(x){
return(paste0(res,x))
}
theme_set(self_base_theme)
p + geom_smooth()
p1
p + geom_smooth()+self_classic_theme
p + geom_smooth()
p + geom_point() + geom_smooth()
p + geom_point() + geom_smooth(method="lm")
p + geom_point() +
geom_smooth(method="gam") +
scale_x_log10()
p + geom_point() +
geom_smooth(method="lm") +
scale_x_log10()
p + geom_point() +
geom_smooth(method="gam") +
scale_x_log10(labels=scales::dollar)
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp,
color = continent))
p
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp,
color = continent))
p
p
p + geom_point() +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
p + geom_point() +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
p <- ggplot(gapminder, mapping = aes(
x = gdpPercap,
y = lifeExp,
color = continent,
fill = continent))
p + geom_point() +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp,
color = "chartreuse4"))
p + geom_point() +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
p + geom_point(alpha=0.5) +
geom_smooth(method="lm", color="cadetblue1", se = FALSE, size = 4, alpha = 0.3) +
scale_x_log10(labels=scales::dollar)
p + geom_point(alpha=0.5) +
geom_smooth(method="lm", color="cadetblue1", se = FALSE, size = 1, alpha = 0.3) +
scale_x_log10(labels=scales::dollar)
p <- ggplot(gapminder, aes(
x = gdpPercap,
y = lifeExp))
p + geom_point(alpha = 0.3) +
geom_smooth(method="gam") +
scale_x_log10(labels=scales::dollar) +
labs(
x = "人均GDP",
y = "期望寿命（年数）",
title = "经济增长与期望寿命",
subtitle = "数据点为每个国家每年",
caption = "数据来源: gapminder"  )
p + geom_point(alpha = 0.3) +
geom_smooth(method="lm") +
scale_x_log10(labels=scales::dollar) +
labs(
x = "人均GDP",
y = "期望寿命（年数）",
title = "经济增长与期望寿命",
subtitle = "数据点为每个国家每年",
caption = "数据来源: gapminder"  )
p + geom_point(mapping = aes(color = continent)) +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
ggsave(filename="文件名.pdf",p)
ggsave(p,filename="文件名.pdf")
p
p1 = p + geom_point(mapping = aes(color = continent)) +
geom_smooth(method="loess") +
scale_x_log10(labels=scales::dollar)
ggsave(p1,filename="文件名.pdf")
ggsave(filename="文件名.pdf",p1)
ggplot(gapminder, aes(
x = year,
y = lifeExp,
group = country)) +
geom_line() +
facet_wrap(~ continent)
oecd_sum
library(socviz)
library(ComplexHeatmap)
library(ComplexHeatmap)
set.seed(123)
nr1 = 4; nr2 = 8; nr3 = 6; nr = nr1 + nr2 + nr3
nc1 = 6; nc2 = 8; nc3 = 10; nc = nc1 + nc2 + nc3
mat = cbind(rbind(matrix(rnorm(nr1*nc1, mean = 1,   sd = 0.5), nr = nr1),
matrix(rnorm(nr2*nc1, mean = 0,   sd = 0.5), nr = nr2),
matrix(rnorm(nr3*nc1, mean = 0,   sd = 0.5), nr = nr3)),
rbind(matrix(rnorm(nr1*nc2, mean = 0,   sd = 0.5), nr = nr1),
matrix(rnorm(nr2*nc2, mean = 1,   sd = 0.5), nr = nr2),
matrix(rnorm(nr3*nc2, mean = 0,   sd = 0.5), nr = nr3)),
rbind(matrix(rnorm(nr1*nc3, mean = 0.5, sd = 0.5), nr = nr1),
matrix(rnorm(nr2*nc3, mean = 0.5, sd = 0.5), nr = nr2),
matrix(rnorm(nr3*nc3, mean = 1,   sd = 0.5), nr = nr3))
)
mat = mat[sample(nr, nr), sample(nc, nc)] # random shuffle rows and columns
rownames(mat) = paste0("row", seq_len(nr))
colnames(mat) = paste0("column", seq_len(nc))
mat
View(mat)
Heatmap(mat)
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("green", "white", "red"))
col_fun(seq(-3, 3))
Heatmap(mat, name = "mat", col = col_fun)
mat2 = mat
mat2[1, 1] = 100000
Heatmap(mat2, name = "mat", col = col_fun,
column_title = "a matrix with outliers")
Heatmap(mat, name = "mat", cluster_rows = FALSE，col = col_fun)
Heatmap(mat, name = "mat", cluster_rows = FALSE,col = col_fun)
Heatmap(mat, name = "mat", cluster_rows = FALSE,cluster_columns = F,col = col_fun)
View(self_classic_theme)
View(self_classic_theme)
View(mat2)
Heatmap(mat, name = "mat", row_km = 2, column_km = 3,
row_gap = unit(0, "mm"), column_gap = unit(0, "mm"), border = TRUE)
Heatmap(mat, name = "mat", row_km = 2, column_km = 3,
row_gap = unit(10, "mm"), column_gap = unit(0, "mm"), border = TRUE)
Heatmap(mat, name = "mat", row_km = 2, column_km = 3,
row_gap = unit(10, "mm"), column_gap = unit(10, "mm"), border = TRUE)
set.seed(123)
mat = matrix(rnorm(100), 10)
rownames(mat) = paste0("R", 1:10)
colnames(mat) = paste0("C", 1:10)
column_ha = HeatmapAnnotation(foo1 = runif(10), bar1 = anno_barplot(runif(10)))
row_ha = rowAnnotation(foo2 = runif(10), bar2 = anno_barplot(runif(10)))
Heatmap(mat, name = "mat", top_annotation = column_ha, right_annotation = row_ha)
mat
runif(10)
column_ha = HeatmapAnnotation(foo1 = runif(10))
row_ha = rowAnnotation(foo2 = runif(10)))
Heatmap(mat, name = "mat", top_annotation = column_ha, right_annotation = row_ha)
row_ha = rowAnnotation(foo2 = runif(10))
Heatmap(mat, name = "mat", top_annotation = column_ha, right_annotation = row_ha)
Heatmap(matrix(rnorm(100), 10), name = "mat",
top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4),
labels = c("group1", "group2", "group3"),
labels_gp = gpar(col = "white", fontsize = 10))),
column_km = 3,
left_annotation = rowAnnotation(foo = anno_block(gp = gpar(fill = 2:4),
labels = c("group1", "group2", "group3"),
labels_gp = gpar(col = "white", fontsize = 10))),
row_km = 3)
# 绘制热图 + 列注释
Heatmap(mat,
top_annotation = col_ha,
name = "Expression")
# 加载包
library(ComplexHeatmap)
# 模拟矩阵
set.seed(123)
mat = matrix(rnorm(100), 10)
rownames(mat) = paste0("R", 1:10)
colnames(mat) = paste0("C", 1:10)
# 设置列分组，例如将前5列设为Group1，后5列为Group2
group = rep(c("Group1", "Group2"), each = 5)
group = factor(group)
# 构建列注释
col_ha = HeatmapAnnotation(
group = group,
col = list(group = c("Group1" = "skyblue", "Group2" = "salmon"))
)
group
group
# 构建列注释
col_ha = HeatmapAnnotation(
group = group,
col = list(group = c("Group1" = "skyblue", "Group2" = "salmon"))
)
# 绘制热图 + 列注释
Heatmap(mat,
top_annotation = col_ha,
name = "Expression")
# 构建列注释
col_ha = HeatmapAnnotation(
group = group,
col = list(group = c("Group1" = "yellow", "Group2" = "salmon"))
)
# 绘制热图 + 列注释
Heatmap(mat,
top_annotation = col_ha,
name = "Expression")
# 构建列注释
col_ha = HeatmapAnnotation(
group = group,
col = list(group = c("Group1" = "yellow", "Group2" = "blue"))
)
# 绘制热图 + 列注释
Heatmap(mat,
top_annotation = col_ha,
name = "Expression")
# 绘制热图 + 列注释
h1 = Heatmap(mat,
top_annotation = col_ha,
name = "Expression")
draw(h1)
BiocManager::install("jsonlite", update = FALSE)
library(ggplot2)
